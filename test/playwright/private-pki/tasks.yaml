# Copyright 2025 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

tasks:
  - name: private-pki-certs
    description: "Generate Private PKI Certs for Playwright tests"
    actions:
      - description: "Check for sudo access"
        cmd: |
          echo "This test requires elevated permissions to run - requesting sudo (if paused enter password)"
          sudo echo "got sudo! success!"

      - description: "Generate and Setup CA certs"
        cmd: |
          # Create directories and clean up old certificates
          mkdir -p build/private-pki

          # remove existing local private pki certs
          if [ -f /usr/local/share/ca-certificates/uds-test-ca.crt ]; then
            sudo rm /usr/local/share/ca-certificates/uds-test-ca.crt
            sudo update-ca-certificates --fresh
          fi

          # Generate CA key and certificate
          openssl genrsa -out build/private-pki/ca.key 2048
          openssl req -x509 -new -nodes -key build/private-pki/ca.key -sha256 -days 365 \
            -out build/private-pki/ca.crt -subj "/CN=UDS Test CA"

          # Generate and sign certificates
          for gateway in admin tenant; do
            # Set CN based on gateway type
            cn=$([ "$gateway" = "admin" ] && echo "admin.uds.dev" || echo "uds.dev")

            # Generate key and CSR
            openssl genrsa -out build/private-pki/${gateway}-gateway.key 2048
            openssl req -new -key build/private-pki/${gateway}-gateway.key \
              -out build/private-pki/${gateway}-gateway.csr \
              -subj "/CN=${cn}" -config hack/private-pki/openssl.cnf

            # Sign certificate with SANs
            openssl x509 -req -in build/private-pki/${gateway}-gateway.csr \
              -CA build/private-pki/ca.crt -CAkey build/private-pki/ca.key \
              -CAcreateserial -out build/private-pki/${gateway}-gateway.crt \
              -days 365 -sha256 -extensions v3_req -extfile hack/private-pki/openssl.cnf

            # Base64 encode
            base64 -w 0 build/private-pki/${gateway}-gateway.crt > build/private-pki/${gateway}-gateway.crt.b64
            base64 -w 0 build/private-pki/${gateway}-gateway.key > build/private-pki/${gateway}-gateway.key.b64
          done

          # Base64 encode CA
          base64 -w 0 build/private-pki/ca.crt > build/private-pki/ca.crt.b64

          # Add CA to system trust store
          sudo cp build/private-pki/ca.crt /usr/local/share/ca-certificates/uds-test-ca.crt
          sudo update-ca-certificates

          # Configure UDS with certificates
          cp bundles/k3d-standard/uds-private-pki-config.yaml build/private-pki/uds-private-pki-config.yaml
          yq -i '.variables.core.CA_CERT = "'"$(cat build/private-pki/ca.crt.b64)"'"' build/private-pki/uds-private-pki-config.yaml
          yq -i '.variables.core.ADMIN_TLS_CERT = "'"$(cat build/private-pki/admin-gateway.crt.b64)"'"' build/private-pki/uds-private-pki-config.yaml
          yq -i '.variables.core.ADMIN_TLS_KEY = "'"$(cat build/private-pki/admin-gateway.key.b64)"'"' build/private-pki/uds-private-pki-config.yaml
          yq -i '.variables.core.TENANT_TLS_CERT = "'"$(cat build/private-pki/tenant-gateway.crt.b64)"'"' build/private-pki/uds-private-pki-config.yaml
          yq -i '.variables.core.TENANT_TLS_KEY = "'"$(cat build/private-pki/tenant-gateway.key.b64)"'"' build/private-pki/uds-private-pki-config.yaml

  - name: private-pki-tests
    description: "Run Private PKI Tests"
    actions:
      - description: "Move Cert to Testing directory"
        cmd: cp build/private-pki/ca.crt test/playwright/private-pki
      - description: "Run Private PKI Tests"
        dir: test/playwright
        cmd: |
          # renovate: datasource=docker depName=mcr.microsoft.com/playwright versioning=docker
          docker run --rm --ipc=host --net=host --mount type=bind,source="$(pwd)",target=/app mcr.microsoft.com/playwright:v1.56.1-noble sh -c " \
            cd app && \
            npm ci && \
            npx playwright test --config=private-pki/playwright.private-pki.config.ts private-pki/private-pki.test.ts\
            "
