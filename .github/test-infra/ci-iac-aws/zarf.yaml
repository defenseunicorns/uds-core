# yaml-language-server: $schema=https://raw.githubusercontent.com/defenseunicorns/zarf/main/zarf.schema.json
kind: ZarfPackageConfig
metadata:
  name: ci-iac-aws
  description: "CI - IAC AWS (not for Prod use)"
  # x-release-please-start-version
  version: "0.15.1"
  # x-release-please-end
  architecture: amd64
  source: https://github.com/defenseunicorns/uds-core
  documentation: https://github.com/defenseunicorns/uds-core
  vendor: Defense Unicorns

variables:
  - name: CLUSTER_NAME
    description: "Used in loki and velero terraform.tfvars"
    prompt: true
  - name: STATE_BUCKET_NAME
    description: "Name of the pre-existing Terraform state S3 bucket"
  - name: STATE_KEY
    description: "Path to the state file key in the state bucket"
  - name: STATE_DYNAMODB_TABLE_NAME
    description: "Name of the DynamoDB table used for Terraform state locking"
  - name: REGION
    description: "The AWS region to run the Terraform in"
    default: "us-west-2"
  - name: PERMISSIONS_BOUNDARY_NAME
    default: ""
  - name: USE_PERMISSIONS_BOUNDARY
    default: "true"

components:
  - name: download-terraform
    required: true
    actions:
      onDeploy:
        after:
          - cmd: |
              rm -f run/loki/terraform || true
              rm -f run/velero/terraform || true
            description: Clean up previous install since archiver doesn't overwrite the output
          - cmd: "./extract-terraform.sh 1.5.7"
    files:
      - source: extract.sh
        target: extract-terraform.sh
        executable: true
      # terraform binary into zarf package
      - source: https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
        target: tmp/terraform_1.5.7_linux_amd64.zip
  - name: loki-module
    required: true
    actions:
      onCreate:
        before:
          - cmd: terraform get -update
            dir: loki
    files:
      - source: loki
        target: run/loki
  - name: loki-execute-terraform
    required: true
    actions:
      onDeploy:
        before:
          - cmd: echo ${ZARF_VAR_STATE_KEY} | sed 's/\.tfstate/-loki.tfstate/g'
            dir: run/loki
            setVariables:
              - name: STATE_KEY_LOKI
          - cmd: |
              ../terraform init -force-copy \
              -backend-config="bucket=${ZARF_VAR_STATE_BUCKET_NAME}" \
              -backend-config="key=${ZARF_VAR_STATE_KEY_LOKI}" \
              -backend-config="region=${ZARF_VAR_REGION}" \
              -backend-config="dynamodb_table=${ZARF_VAR_STATE_DYNAMODB_TABLE_NAME}"
            dir: run/loki
          - cmd: ../terraform apply -auto-approve
            dir: run/loki
      onRemove:
        before:
          - cmd: |
              if [ -d "run/loki" ]; then
                cd run/loki
                ../terraform destroy -auto-approve
              else
                echo "Cannot remove: run/loki directory does not exist"
              fi
  - name: loki-outputs
    required: true
    actions:
      onDeploy:
        after:
          - cmd: ../terraform output -raw s3_bucket
            dir: run/loki
            setVariables:
              - name: LOKI_S3_BUCKET
          - cmd: ../terraform output -raw aws_region
            dir: run/loki
            setVariables:
              - name: LOKI_S3_AWS_REGION
          - cmd: ../terraform output -raw irsa_role_arn
            dir: run/loki
            setVariables:
              - name: LOKI_S3_ROLE_ARN
  - name: velero-module
    required: true
    actions:
      onCreate:
        before:
          - cmd: terraform get -update
            dir: velero
    files:
      - source: velero
        target: run/velero
  - name: velero-execute-terraform
    required: true
    actions:
      onDeploy:
        before:
          - cmd: echo ${ZARF_VAR_STATE_KEY} | sed 's/\.tfstate/-velero.tfstate/g'
            dir: run/velero
            setVariables:
              - name: STATE_KEY_VELERO
          - cmd: "echo ${ZARF_VAR_STATE_KEY_VELERO}"
          - cmd: |
              ../terraform init -force-copy \
              -backend-config="bucket=${ZARF_VAR_STATE_BUCKET_NAME}" \
              -backend-config="key=${ZARF_VAR_STATE_KEY_VELERO}" \
              -backend-config="region=${ZARF_VAR_REGION}" \
              -backend-config="dynamodb_table=${ZARF_VAR_STATE_DYNAMODB_TABLE_NAME}"
            dir: run/velero
          - cmd: ../terraform apply -auto-approve
            dir: run/velero
      onRemove:
        before:
          - cmd: |
              if [ -d "run/velero" ]; then
                cd run/velero
                ../terraform destroy -auto-approve
              else
                echo "Cannot remove: run/velero directory does not exist"
              fi
  - name: velero-outputs
    required: true
    actions:
      onDeploy:
        after:
          - cmd: ../terraform output -raw s3_bucket
            dir: run/velero
            setVariables:
              - name: VELERO_S3_BUCKET
          - cmd: ../terraform output -raw aws_region
            dir: run/velero
            setVariables:
              - name: VELERO_S3_AWS_REGION
          - cmd: ../terraform output -raw irsa_role_arn
            dir: run/velero
            setVariables:
              - name: VELERO_S3_ROLE_ARN
  - name: export-outputs
    required: true
    actions:
      onDeploy:
        after:
          - cmd: |
              cat <<EOF> .github/bundles/uds-config.yaml
              options:
              architecture: amd64

              variables:
                core:
                  # loki_bucket_chunks: ${ZARF_VAR_LOKI_S3_BUCKET}
                  # loki_bucket_ruler: ${ZARF_VAR_LOKI_S3_BUCKET}
                  # loki_bucket_admin: ${ZARF_VAR_LOKI_S3_BUCKET}
                  # loki_region: ${ZARF_VAR_LOKI_S3_AWS_REGION}
                  # loki_role_arn: ${ZARF_VAR_LOKI_S3_ROLE_ARN}
                  VELERO_USE_SECRET: false
                  VELERO_IRSA_ANNOTATION:
                    eks.amazonaws.com/role-arn: "${ZARF_VAR_VELERO_S3_ROLE_ARN}"
                  VELERO_BUCKET: ${ZARF_VAR_VELERO_S3_BUCKET}
                  VELERO_BUCKET_REGION: ${ZARF_VAR_VELERO_S3_AWS_REGION}
                  VELERO_BUCKET_PROVIDER_URL: ""
                  velero_bucket_credential_name: ""
                  velero_bucket_credential_key: ""
              EOF
