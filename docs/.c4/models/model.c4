/**
 * Copyright 2025 Defense Unicorns
 * SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial
 */

 model {
  // personas
  admin = actor "Cluster Administrator" {
    -> uds-core.istio-admin-gateway
    -> uds-core.istio-admin-gateway.external-admin-loadbalancer
  }

  enduser = actor "End User" {
    -> uds-core.istio-tenant-gateway
    -> uds-core.istio-tenant-gateway.external-tenant-loadbalancer
  }

  cloud = system "Cloud" {
    cluster = system "Kubernetes Cluster" {
      // system
      uds-core = system "UDS Core" {
        description "UDS Core"

        pepr-system = namespace "Pepr System Namespace" {
          pepr-watcher = pod "Pepr Watcher"
          pepr-admission = pod "Pepr Admission"

          // external relationships
          pepr-watcher -> kubernetes-control-plane
          pepr-watcher -> kubernetes-control-plane.api-server
          pepr-admission -> kubernetes-control-plane.pepr-mutation-webhook
          pepr-admission -> kubernetes-control-plane.pepr-validating-webhook
        }

        zarf = namespace "Zarf Namespace" {
          zarf-agent = pod "Zarf Agent"
          zarf-registry = pod "Zarf Registry"

          // external relationships
          zarf-agent -> kubernetes-control-plane
          zarf-agent -> kubernetes-control-plane.zarf-mutating-webhook
          zarf-registry -> kubernetes-control-plane.kubelet
        }

        istio-system = namespace "Istio System Namespace" {
          istiod = pod "Istiod"
          istio-cni = pod "Istio CNI"
          ztunnel = pod "Ztunnel"

          // external relationship
          istiod -> kubernetes-control-plane
          istiod -> kubernetes-control-plane.api-server
        }

        istio-tenant-gateway = namespace "Istio Tenant Gateway Namespace" {
          external-tenant-loadbalancer = loadbalancer "External Tenant LoadBalancer"
          tenant-gw = pod "Tenant Ingress Gateway"
          istio-tenant-ingress-gateway = pod "Istio Tenant Ingress Gateway"

          // internal relationships
          external-tenant-loadbalancer -> tenant-gw
          tenant-gw -> istio-tenant-ingress-gateway

          // external relationships
          istio-tenant-ingress-gateway -> keycloak
          istio-tenant-ingress-gateway -> keycloak.keycloak-waypoint
          istio-tenant-ingress-gateway -> generic-customer
          istio-tenant-ingress-gateway -> generic-customer.customer-waypoint
        }

        istio-admin-gateway = namespace "Istio Admin Gateway Namespace" {
          external-admin-loadbalancer = loadbalancer "External Admin LoadBalancer"
          admin-gw = pod "Admin Ingress Gateway"
          istio-admin-ingress-gateway = pod "Istio Admin Ingress Gateway"

          // internal relationships
          external-admin-loadbalancer -> admin-gw
          admin-gw -> istio-admin-ingress-gateway

          // external relationships
          istio-admin-ingress-gateway -> keycloak
          istio-admin-ingress-gateway -> keycloak.keycloak-waypoint
          istio-admin-ingress-gateway -> grafana
          istio-admin-ingress-gateway -> grafana.grafana
        }

        monitoring = namespace "Monitoring Namespace" {
          prometheus = pod "Prometheus"
          prometheus-operator = pod "Prometheus Operator"
          kube-state-metrics = pod "Kube State Metrics"
          node-exporter = pod "Node Exporter"
          alertmanager = pod "Alertmanager"

          // internal relationships
          prometheus -> kube-state-metrics
          prometheus -> node-exporter
          prometheus -> alertmanager

          // external relationships
          prometheus-operator -> kubernetes-control-plane
          prometheus-operator -> kubernetes-control-plane.api-server
        }

        grafana = namespace "Grafana Namespace" {
          grafana = pod "Grafana"

          // external relationships
          grafana -> keycloak
          grafana -> keycloak.keycloak-waypoint
          grafana -> monitoring
          grafana -> monitoring.prometheus
          grafana -> loki
          grafana -> loki.loki-gateway
        }

        falco = namespace "Falco Namespace" {
          falco = pod "Falco"
          falcosidekick = pod "FalcoSidekick"

          // internal relationships
          falco -> falcosidekick

          // external relationships
          falcosidekick -> ext-alerts
          falcosidekick -> loki
          falcosidekick -> loki.loki-gateway
        }

        loki = namespace "Loki Namespace" {
          loki-gateway = pod "Loki Gateway"
          loki-write = pod "Loki Write"
          loki-read = pod "Loki Read"
          loki-backend = pod "Loki Backend"

          // internal relationships
          loki-gateway -> loki-read
          loki-gateway -> loki-write
          loki-gateway -> loki-backend
          loki-read -> loki-backend
          loki-backend -> loki-read
          loki-write -> loki-backend

          // external relationships
          loki-backend -> external-services
          loki-backend -> external-services.ext-loki-storage
          loki-read -> external-services.ext-loki-storage
          loki-write -> external-services.ext-loki-storage
        }

        vector = namespace "Vector Namespace" {
          vector = pod "Vector"

          // external relationships
          vector -> ext-siem
          vector -> loki
          vector -> loki.loki-gateway
        }

        velero = namespace "Velero Namespace" {
          velero = pod "Velero"

          // external relationships
          velero -> external-services
          velero -> external-services.ext-velero-storage
        }

        authservice = namespace "Authservice Namespace" {
          authservice = pod "AuthService"

          // external relationships
          authservice -> keycloak
          authservice -> keycloak.keycloak-waypoint
        }

        keycloak = namespace "Keycloak Namespace" {
          keycloak = pod "Keycloak"
          keycloak-waypoint = pod "Istio-Waypoint"

          // internal relationships
          keycloak-waypoint -> keycloak
          keycloak -> keycloak-waypoint

          // external relationships
          keycloak-waypoint -> external-services
          keycloak-waypoint -> external-services.ext-keycloak-db

          // hack that connects pepr-watcher to keycloak
          // doing pepr-watcher -> keycloak breaks the diagram
          keycloak -> pepr-watcher {
            style {
              head none
              tail normal
            }
          }
        }

        generic-customer = namespace "Generic Customer Namespace" {
          customer-waypoint = pod "Istio-Waypoint"
          custom-application = pod "Customer Application"

          // internal relationships
          customer-waypoint -> custom-application
          custom-application -> customer-waypoint

          // external relationships
          customer-waypoint -> authservice
          customer-waypoint -> authservice.authservice
        }

        kubernetes-control-plane = namespace "Kubernetes ControlPlane" {
          pepr-mutation-webhook = component "Pepr Mutating Webhook"
          pepr-validating-webhook = component "Pepr Validating Webhook"
          kubelet = component "Kubelet"
          api-server = component "API Server"
          zarf-mutating-webhook = component "Zarf Mutating Webhook"
          istio-mutating-webhook = component "Istio Mutating Webhook"

          // external relationships
          istio-mutating-webhook -> istio-system
          istio-mutating-webhook -> istio-system.istiod
          zarf-mutating-webhook -> zarf
          zarf-mutating-webhook -> zarf.zarf-agent
          kubelet -> zarf.zarf-registry
          pepr-mutation-webhook -> pepr-system
          pepr-mutation-webhook -> pepr-system.pepr-admission
          pepr-validating-webhook -> pepr-system.pepr-admission
        }
      }
      external-services = system "External Services" {
        ext-keycloak-db = database "External Keycloak Database"
        ext-loki-storage = storage "External Loki Storage"
        ext-velero-storage = storage "External Velero Storage"
      }
    }
  }
  ext-siem = siem_tool "External SIEM Tool"
  ext-alerts = alert_destination "External Alerting Destination"
}
