# Copyright 2025 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

schema-version: v0

inputs:
  flavor:
    description: "Flavor of the package"
    default: upstream
  layer:
    description: "Layer to use"
    default: ""
  istio_components:
    description: "Istio components to deploy"
    default: ""

tasks:
  default:
    - uses: test-uds-core

  dev-setup:
    - uses: file:tasks/setup.yaml?task=create-k3d-cluster
    - run: PEPR_MODE=dev npx ts-node -e "import { registerCRDs } from './src/pepr/operator/crd/register'; registerCRDs()"
    # Note: this behaves a bit differently than a normal dev/demo deploy where 'uds-dev-stack' is ignored at the webhook level
    # Since we can't customize the 'pepr dev' setup this is a close enough approximation to work for dev locally
    - run: |
        uds zarf tools kubectl create ns uds-policy-exemptions
        uds zarf tools kubectl apply -f - <<EOF
        apiVersion: uds.dev/v1alpha1
        kind: Exemption
        metadata:
          name: dev-stack
          namespace: uds-policy-exemptions
        spec:
          exemptions:
            - policies:
                - DisallowHostNamespaces
                - DisallowPrivileged
                - DropAllCapabilities
                - RequireNonRootUser
                - RestrictCapabilities
                - RestrictHostPathWrite
                - RestrictHostPorts
                - RestrictVolumeTypes
              matcher:
                namespace: uds-dev-stack
                name: "^.*"
              title: "dev-stack-pods"
              description: "The dev stack is not production-ready and can run without adhering to policies"
        EOF
    - run: uds zarf dev deploy src/istio --flavor upstream --registry-url docker.io --no-progress --components=${{ input "istio_components" }}
      # Note: Since this is a dev deploy without any `--flavor` it only deploys the CRDs (other components are flavored)
    - run: "uds zarf dev deploy src/prometheus-stack --no-progress"
    - run: |
        uds zarf tools kubectl apply -f src/pepr/uds-cluster-crds/templates/clusterconfig.uds.dev.yaml
        uds zarf tools kubectl apply -f - <<EOF
        apiVersion: uds.dev/v1alpha1
        kind: ClusterConfig
        metadata:
          name: uds-cluster-config
        spec:
          attributes:
            clusterName: ""
            tags: []
          expose:
            adminDomain: ""
            caCert: ""
            domain: uds.dev
          networking:
            kubeApiCIDR: ""
            kubeNodeCIDRs: []
          policy:
            allowAllNsExemptions: false
        EOF
        uds zarf tools kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: uds-operator-config
          namespace: pepr-system
        type: Opaque
        stringData:
          devMode: "active"
        EOF
    - run: |
        echo "Next steps:"
        echo "  - To test & develop the Pepr module, run 'npx pepr dev' from a Javascript debug terminal"
        echo "  - Otherwise run 'npx pepr deploy' to deploy the Pepr module to the cluster"
        echo "  - Additional source packages can be deployed with 'zarf dev deploy src/<package> --flavor upstream'"

  slim-dev:
    - uses: file:tasks/create.yaml?task=:k3d-slim-dev-bundle
    - uses: file:tasks/deploy.yaml?task=:k3d-slim-dev-bundle

  dev-identity:
    - uses: dev-setup
    - run: "npx pepr deploy --yes"
    - run: "uds run dev-deploy --set LAYER=identity-authorization --no-progress"

  dev-deploy:
    - run: 'uds zarf dev deploy packages/${{ input "layer" }} --flavor ${{ input "flavor" }} --no-progress'

  setup-cluster:
    - uses: file:tasks/setup.yaml?task=k3d-test-cluster

  create-standard-package:
    - uses: file:tasks/create.yaml?task=standard-package

  test-single-layer:
    - uses: file:tasks/test.yaml?task=layer-dependencies
    - uses: file:tasks/test.yaml?task=single-layer

  deploy-standard-bundle:
    - uses: file:tasks/deploy.yaml?task=k3d-standard-bundle

  test-uds-core:
    - uses: file:tasks/test.yaml?task=uds-core

  test-uds-core-multi-node:
    - uses: file:tasks/test.yaml?task=uds-core
      with:
        K3D_EXTRA_ARGS: "--servers 3 --agents 2"

  test-uds-core-ha:
    - uses: file:tasks/setup.yaml?task=ha-postgres
    - uses: file:tasks/setup.yaml?task=ha-redis
    - uses: file:tasks/test.yaml?task=uds-core-ha

  test-uds-core-ha-upgrade:
    - uses: file:tasks/setup.yaml?task=ha-postgres
    - uses: file:tasks/setup.yaml?task=ha-redis
    - uses: file:tasks/test.yaml?task=uds-core-ha-upgrade

  test-uds-core-upgrade:
    - uses: file:tasks/test.yaml?task=uds-core-upgrade

  lint-check:
    - uses: file:tasks/lint.yaml?task=check

  lint-fix:
    - uses: file:tasks/lint.yaml?task=fix

  dev-docs:
    - run: |
        rm -rf uds-docs
    - run: |
        git clone https://github.com/defenseunicorns/uds-docs.git uds-docs
        rm -rf uds-docs/src/content/docs/reference uds-docs/src/content/docs/.images
        # This only symlinks the reference and images folders since these are the only docs we use in the docs site
        ln -s $(pwd)/docs/reference uds-docs/src/content/docs/reference
        ln -s $(pwd)/docs/.images uds-docs/src/content/docs/.images
    - run: |
        # Actual startup takes up to a minute because of the npm install
        cd uds-docs && npm i && echo "Sidebar will be different from the live docs, this is expected" && npm run dev && echo ""

  update-diagrams:
    - run: |
        d2 fmt docs/.images/diagrams/operator-resource-tree.d2
        # Using Poppins font from https://fonts.google.com/specimen/Poppins, license: https://fonts.google.com/specimen/Poppins/license
        d2 docs/.images/diagrams/operator-resource-tree.d2 docs/.images/diagrams/operator-resource-tree.png --layout elk --pad 20 \
          --font-regular docs/.images/fonts/Poppins-Regular.ttf --font-italic docs/.images/fonts/Poppins-Italic.ttf \
          --font-bold docs/.images/fonts/Poppins-Bold.ttf --font-semibold docs/.images/fonts/Poppins-SemiBold.ttf
