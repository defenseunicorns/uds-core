variables:
  - name: CLUSTER_NAME
  - name: REGION
  - name: PERMISSIONS_BOUNDARY_NAME
  - name: PERMISSIONS_BOUNDARY_ARN
  - name: STATE_BUCKET_NAME
  - name: STATE_DYNAMODB_TABLE_NAME
  - name: AMI_ID
    default: ami-068ab6ac1cec494e0

tasks:
  - name: install-eksctl
    actions:
      - cmd: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.165.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

  - name: create-cluster
    actions:
      - cmd: |
          cat <<EOF> cluster-config.yaml
          apiVersion: eksctl.io/v1alpha5
          kind: ClusterConfig

          metadata:
            name: ${CLUSTER_NAME}
            region: us-west-2
            version: "1.27"
            tags:
              PermissionsBoundary: ${PERMISSIONS_BOUNDARY_NAME}

          iam:
            withOIDC: true
            serviceRolePermissionsBoundary: ${PERMISSIONS_BOUNDARY_ARN}

          addons:
            - name: aws-ebs-csi-driver
              version: v1.25.0-eksbuild.1

              attachPolicyARNs:
                - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
              permissionsBoundary: ${PERMISSIONS_BOUNDARY_ARN}
              tags:
                PermissionsBoundary: ${PERMISSIONS_BOUNDARY_NAME}

            - name: vpc-cni
              permissionsBoundary: ${PERMISSIONS_BOUNDARY_ARN}
              tags:
                PermissionsBoundary: ${PERMISSIONS_BOUNDARY_NAME}

          managedNodeGroups:
            - name: ng-1
              instanceType: m5.2xlarge
              desiredCapacity: 3
              volumeSize: 150
              tags:
                PermissionsBoundary: ${PERMISSIONS_BOUNDARY_NAME}
              iam:
                instanceRolePermissionsBoundary: ${PERMISSIONS_BOUNDARY_ARN}
              ami: ${AMI_ID}
              amiFamily: AmazonLinux2
              overrideBootstrapCommand: |
                #!/bin/bash
                /etc/eks/bootstrap.sh CLUSTER_NAME --container-runtime containerd
          EOF

      - cmd: eksctl create cluster --dry-run -f cluster-config.yaml
      - cmd: sleep 5
      - cmd: eksctl create cluster -f cluster-config.yaml
      - cmd: eksctl utils write-kubeconfig -c ${CLUSTER_NAME}
      
  - name: destroy-cluster
    actions:
      - cmd: eksctl delete cluster -f cluster-config.yaml --disable-nodegroup-eviction --wait

  - name: create-iac
    actions:
      - task: apply-terraform
        with:
          module: loki
      - task: terraform-outputs
        with:
          module: loki
      - task: apply-terraform
        with:
          module: velero
      - task: terraform-outputs
        with:
          module: velero
      - task: create-uds-config

  - name: destroy-iac
    actions:
      - task: destory-terraform
        with:
          module: loki
      - task: destory-terraform
        with:
          module: velero

  - name: apply-terraform
    inputs:
      module:
        description: "name of iac module to apply"
    actions:
      - cmd: echo ${STATE_KEY} | sed 's/\.tfstate/-$INPUT_MODULE.tfstate/g'
        setVariables:
          - name: MODULE_STATE_KEY
      - cmd: |
          terraform init -force-copy \
          -backend-config="bucket=${STATE_BUCKET_NAME}" \
          -backend-config="key=${MODULE_STATE_KEY}" \
          -backend-config="region=${REGION}" \
          -backend-config="dynamodb_table=${STATE_DYNAMODB_TABLE_NAME}"
          
          terraform apply -auto-approve
        dir: .github/test-infra/ci-iac-aws/$INPUT_MODULE
  
  - name: terraform-outputs
    inputs:
      module:
        description: "name of module to grab outputs for"
    actions:
      - cmd: |
          "${INPUT_MODULE}_S3_BUCKET=$(terraform output -raw s3_bucket)"
          "${INPUT_MODULE}_S3_AWS_REGION=$(terraform output -raw aws_region)"
          "${INPUT_MODULE}_S3_ROLE_ARN=$(terraform output -raw irsa_role_arn)"
        dir: .github/test-infra/ci-iac-aws/$INPUT_MODULE

  - name: destory-terraform
    inputs:
      module:
        description: "name of iac to destroy"
    actions:
      - cmd: |
          terraform destroy -auto-approve
        dir: .github/test-infra/ci-iac-aws/$INPUT_MODULE

  - name: create-uds-config
    actions:
      - cmd: |
          cat <<EOF> .github/bundles/uds-config.yaml
          options:
          architecture: amd6
          variables:
            core:
              loki_chunks_bucket: ${LOKI_S3_BUCKET}
              loki_ruler_bucket: ${LOKI_S3_BUCKET}
              loki_admin_bucket: ${LOKI_S3_BUCKET}
              loki_s3_region: ${LOKI_S3_AWS_REGION}
              loki_s3-endpoint: ""
              loki_irsa_annotation:
                eks.amazonaws.com/role-arn: ${LOKI_S3_ROLE_ARN}
              velero_use_secret: false
              velero_irsa_annotation:
                eks.amazonaws.com/role-arn: "${VELERO_S3_ROLE_ARN}"
              velero_bucket: ${VELERO_S3_BUCKET}
              velero_bucket_region: ${VELERO_S3_AWS_REGION}
              velero_bucket_provider_url: ""
              velero_bucket_credential_name: ""
              velero_bucket_credential_key: ""
          EOF