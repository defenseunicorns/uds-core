# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

variables:
  - name: BASE_REPO
    default: "ghcr.io/defenseunicorns/packages"
  - name: FLAVOR
    default: "upstream"
  - name: SNAPSHOT
    description: Whether this is a snapshot release
    default: "false"

tasks:
  - name: determine-repo
    actions:
      - description: "Determine repository for the given flavor/type of release"
        cmd: |
          repo="${BASE_REPO}"
          # unicorn flavor = private repository
          if [ "${FLAVOR}" = "unicorn" ]; then
            repo="${repo}/private"
          fi
          repo="${repo}/uds"
          # snapshots = snapshot repository
          if [ "${SNAPSHOT}" = "true" ]; then
            repo="${repo}/snapshots"
          fi
          echo "${repo}"
        mute: true
        setVariables:
          - name: TARGET_REPO

  - name: keycloak-admin-user
    actions:
      - description: Sets up the Keycloak admin user for dev/testing if not already created
        cmd: |
          # Check if the secret exists
          if ./zarf tools kubectl get secret keycloak-admin-password -n keycloak > /dev/null 2>&1; then
            echo "Admin user exists, skipping..."
          else
            # Start port-forward with zarf
            ./zarf tools kubectl port-forward -n keycloak svc/keycloak-http 8080:8080 &
            PF_PID=$!

            # Wait a bit to ensure port-forward is ready
            sleep 5

            # Create admin user with curl
            PASSWORD=$(openssl rand -base64 12)
            STATE_COOKIE=$(curl --silent --output /dev/null --cookie-jar - http://localhost:8080/ | grep "WELCOME_STATE_CHECKER" | awk '{print $7}')
            curl --silent --show-error http://localhost:8080/ \
              -H "Cookie: WELCOME_STATE_CHECKER=${STATE_COOKIE}" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "username=admin" \
              --data-urlencode "password=${PASSWORD}" \
              --data-urlencode "passwordConfirmation=${PASSWORD}" \
              --data-urlencode "stateChecker=${STATE_COOKIE}"

            # Kill the port-forward
            kill $PF_PID

            ./zarf tools kubectl create secret generic keycloak-admin-password \
              --from-literal=username=admin \
              --from-literal=password=${PASSWORD} \
              -n keycloak
          fi

  - name: setup-hosts
    actions:
      - description: Fetch Admin Gateway IP Address
        cmd: uds zarf tools kubectl get service -n istio-admin-gateway admin-ingressgateway -o=jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null
        mute: true
        setVariables:
          - name: ADMIN_GW_IP
      - description: Fetch Tenant Gateway IP Address
        cmd: uds zarf tools kubectl get service -n istio-tenant-gateway tenant-ingressgateway -o=jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null
        mute: true
        setVariables:
          - name: TENANT_GW_IP
      - description: Adds Cluster LoadBalancer IP Addresses to match appropriate hosts names in /etc/hosts
        mute: true
        cmd: |
          echo "$ADMIN_GW_IP keycloak.admin.uds.dev neuvector.admin.uds.dev grafana.admin.uds.dev\n$TENANT_GW_IP sso.uds.dev" | sudo tee --append /etc/hosts
