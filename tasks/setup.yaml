# Copyright 2025 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

schema-version: v0

tasks:
  create-k3d-cluster:
    # renovate: datasource=docker depName=ghcr.io/defenseunicorns/packages/uds-k3d versioning=docker
    - run: "uds zarf package deploy oci://defenseunicorns/uds-k3d:0.16.0-airgap --confirm --no-progress"

  k3d-test-cluster:
    - uses: create-k3d-cluster
    # renovate: datasource=github-tags depName=zarf-dev/zarf versioning=semver
    - run: "uds zarf package deploy oci://ghcr.io/zarf-dev/packages/init:v0.60.0 --confirm --no-progress"

  ha-postgres:
    - run: |
        docker kill postgres || true
        docker rm postgres || true
    - run: docker network create k3d-uds || true
    - run: |
        mkdir -p build/certs
        openssl req -x509 -newkey rsa:4096 -sha256 -nodes \
          -keyout build/certs/server.key \
          -out build/certs/server.crt \
          -days 365 -subj "/CN=postgres" > /dev/null 2>&1 || {
            echo "Error: Failed to generate PostgreSQL certs"
            exit 1
          }
        chmod 600 build/certs/server.key
        chmod 644 build/certs/server.crt
    - run: |
        docker run --rm \
          -v $(pwd)/build/certs:/certs \
          --entrypoint bash postgres:16 \
          -c "cp /certs/server.key /certs/fixed.key && \
              cp /certs/server.crt /certs/fixed.crt && \
              chown 999:999 /certs/fixed.key /certs/fixed.crt && \
              chmod 600 /certs/fixed.key && chmod 644 /certs/fixed.crt"
    - run: |
        CONTAINER_NAME=postgres
        # We're using Postgres 16 as this is the compatibility version for RDS
        POSTGRES_VERSION=16
        # RDS (Postgres 16) supports only TLS 1.2 only
        TLS_VERSION=TLSv1.2
        docker run -p 5432:5432 --network=k3d-uds --rm --name $CONTAINER_NAME \
          -e POSTGRES_DB=keycloak \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD='unicorn123!@#UN' \
          -v $(pwd)/build/certs/fixed.crt:/var/lib/postgresql/server.crt:ro \
          -v $(pwd)/build/certs/fixed.key:/var/lib/postgresql/server.key:ro \
          -d postgres:$POSTGRES_VERSION \
          -c ssl=on \
          -c ssl_cert_file=/var/lib/postgresql/server.crt \
          -c ssl_key_file=/var/lib/postgresql/server.key \
          -c ssl_min_protocol_version=$TLS_VERSION \
          -c ssl_max_protocol_version=$TLS_VERSION \
          -c log_connections=on \
          -c log_disconnections=on \
          -c log_min_messages=debug1 \
          -c log_line_prefix='%m [%p] %q%u@%d ' \
          -c log_statement=all
    - run: |
        for i in {1..10}; do
          docker exec postgres pg_isready -U postgres && break
          sleep 1
        done
    - run: docker exec postgres psql -U postgres -c "CREATE DATABASE grafana;"

  ha-redis:
    - run: |
        docker kill redis || true
        docker rm redis || true
    - run: docker network create k3d-uds || true
    - run: |
        mkdir -p build/redis
        cat > build/redis/users.acl <<'EOF'
        user default off
        user authservice on >authservice ~* +@all
        EOF
    - run: |
        # renovate: datasource=docker depName=redis versioning=docker
        REDIS_VERSION=8.2.0
        docker run -p 6379:6379 --network=k3d-uds --rm --name redis \
          -v $(pwd)/build/redis/users.acl:/usr/local/etc/redis/users.acl:ro \
          -d redis:${REDIS_VERSION} \
          --aclfile /usr/local/etc/redis/users.acl \
          --appendonly yes
    - run: |
        for i in {1..10}; do
          docker exec redis redis-cli -u redis://authservice:authservice@127.0.0.1:6379 ping && break
          sleep 1
        done
