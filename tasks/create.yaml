# Copyright 2025 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

schema-version: v0

inputs:
  flavor:
    description: "Flavor of the package"
    default: upstream

  registry1_pepr_image:
    # renovate: datasource=docker depName=registry1.dso.mil/ironbank/opensource/defenseunicorns/pepr/controller versioning=semver
    default: registry1.dso.mil/ironbank/opensource/defenseunicorns/pepr/controller:v0.53.0
    description: "Pepr image for registry1 flavor"

  unicorn_pepr_image:
    # renovate: datasource=github-tags depName=defenseunicorns/pepr versioning=semver
    default: ghcr.io/defenseunicorns/pepr/private/controller:v0.53.0
    description: "Pepr image for unicorn flavor"

  pepr_custom_image:
    default: ""
    description: "Custom image for Pepr build"

  layer:
    description: "Layer to use"
    default: ""

  create_options:
    description: "Additional options passed in when creating Zarf packages. For example: --skip-sbom"
    default: ""

  architecture:
    description: "Architecture to use for create, defaults to system arch"
    default: "${ZARF_ARCHITECTURE:-}"

  shim_bundle:
    description: "Whether to create the shim bundle for base layer"
    default: true

tasks:
  standard-package:
    - uses: single-layer
      with:
        layer: standard
        create_options: ${{ input "create_options" }}

  k3d-standard-bundle:
    - run: ${{ which "uds" }} create bundles/k3d-standard --confirm --no-progress --architecture=${{ input "architecture" }}

  k3d-slim-dev-bundle:
    - uses: single-layer
      with:
        layer: base
        shim_bundle: "false" # Don't create the shim bundle since we are making the slim-dev bundle

    - uses: single-layer
      with:
        layer: identity-authorization

    - run: ${{ which "uds" }} create bundles/k3d-slim-dev --confirm --no-progress --architecture=${{ input "architecture" }}

  checkpoint-dev-package:
    - run: "mkdir -p build"
    - run: ${{ which "zarf" }} package create packages/checkpoint-dev --confirm --no-progress --skip-sbom

  # I'm lazy and don't want to convert uds-common tasks yet
  common-package:
    - run: |
        export ZARF_CONFIG=${{ input "config" }}
        ${{ which "zarf" }} package create ${{ input "path" }} --confirm --no-progress --architecture=${{ input "architecture" }} --flavor ${{ input "flavor" }} ${{ input "create_options" }}

  single-layer:
    # Note: Maru does not support `or` for this conditional task so we just duplicate it for each case
    - uses: pepr-build
      if: input("layer") == "standard" || input("layer") == "base"
    - run: "mkdir -p build"
    - uses: common-package
      with:
        path: packages/${{ input "layer" }}
        config: ./zarf-config.yaml
        create_options: ${{ input "create_options" }}
        architecture: ${{ input "architecture" }}
    - run: ${{ which "uds" }} create bundles/base-shim --confirm --no-progress --architecture=${{ input "architecture" }}
      if: input("layer") == "base" && input("shim_bundle")
      shell: bash

  pepr-build:
    - run: |
        if [ ! "${{ input "pepr_custom_image" }}" == "" ] ; then
          # e.g. PEPR_CUSTOM_IMAGE="pepr:dev uds run slim-dev"
          PEPR_OVERRIDE_IMAGE="--custom-image ${{ input "pepr_custom_image" }}"
        elif [ "${{ input "flavor"}}" = "registry1" ] ; then
          PEPR_OVERRIDE_IMAGE="--custom-image ${{ input "registry1_pepr_image" }}"
        elif [ "${{ input "flavor" }}" = "unicorn" ] ; then
          PEPR_OVERRIDE_IMAGE="--custom-image ${{ input "unicorn_pepr_image" }}"
        else
          PEPR_OVERRIDE_IMAGE=""
        fi
        rm -fr dist
        npm ci
        npx pepr build -z chart $PEPR_OVERRIDE_IMAGE

  test:
    - uses: builtin:fetch
      id: fetch
      with:
        url: "https://sso.uds.dev"
    - run: echo ${{ from "fetch" "body" }}
