# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

includes:
  - config: https://raw.githubusercontent.com/defenseunicorns/uds-identity-config/v0.16.2/tasks.yaml

tasks:
  - name: validate
    actions:
      - description: Validate admin interface
        wait:
          network:
            protocol: https
            address: keycloak.admin.uds.dev
            code: 200
      - description: Validate public interface
        wait:
          network:
            protocol: https
            address: sso.uds.dev
            code: 200

  - name: dev-theme
    actions:
      - task: config:dev-theme

  - name: cacert
    description: "Get the CA cert value for the Istio Gateway"
    actions:
      - cmd: |
          # renovate: datasource=docker depName=ghcr.io/defenseunicorns/uds/identity-config versioning=semver
          IMAGE_TAG="0.16.2"
          # Pre-pull image to simplify output
          docker pull ghcr.io/defenseunicorns/uds/identity-config:${IMAGE_TAG} -q
          # This is written to a file because it is larger than the max env size in the shell
          cat <<EOF > tls_cacert.yaml
          tls:
            cacert: "$(docker run --rm --entrypoint sh ghcr.io/defenseunicorns/uds/identity-config:${IMAGE_TAG} -c 'cat /home/nonroot/authorized_certs.pem | base64 -w 0')"
          EOF
          yq eval '.tls.cacert = load("tls_cacert.yaml").tls.cacert' -i src/istio/values/config-admin.yaml
          yq eval '.tls.cacert = load("tls_cacert.yaml").tls.cacert' -i src/istio/values/config-tenant.yaml
          rm tls_cacert.yaml

  - name: debug-istio-traffic
    actions:
      - task: config:debug-istio-traffic

  - name: regenerate-test-pki
    actions:
      - task: config:regenerate-test-pki

  - name: e2e-test
    actions:
      - description: "Run Keycloak E2E tests"

  - name: update-keycloak-grafana-dashboards
    description: "Pull and update grafana keycloak dashboards"
    actions:
      - description: "Remove any existing dashboards clone"
        cmd: rm -rf .tmp-keycloak-grafana-dashboard || true
      - description: "Clone the Keycloak Grafana dashboards repository"
        cmd: git clone --branch "${KC_GRAFANA_DASHBOARDS_BRANCH:-main}" "${KC_GRAFANA_DASHBOARDS_REPOSITORY:-https://github.com/keycloak/keycloak-grafana-dashboard.git}" .tmp-keycloak-grafana-dashboard --depth 1
      - description: "Ensure correct branch and update"
        cmd: |
          git -C .tmp-keycloak-grafana-dashboard checkout "${KC_GRAFANA_DASHBOARDS_BRANCH:-main}"
          git -C .tmp-keycloak-grafana-dashboard pull
      - description: "Inject Prometheus datasource UID into dashboards"
        cmd: |
          cd .tmp-keycloak-grafana-dashboard/dashboards
          for F in *; do
            cp "${F}" copy.json
            DS_PROMETHEUS=Prometheus envsubst '${DS_PROMETHEUS}' < copy.json > "${F}"
            rm copy.json
          done
      - description: "Copy updated dashboards into uds-core"
        cmd: |
          cp .tmp-keycloak-grafana-dashboard/dashboards/keycloak-capacity-planning-dashboard.json src/keycloak/chart/dashboards/keycloak-capacity-planning-dashboard.json
          cp .tmp-keycloak-grafana-dashboard/dashboards/keycloak-troubleshooting-dashboard.json src/keycloak/chart/dashboards/keycloak-troubleshooting-dashboard.json
      - description: "Patch dashboard variable defaults (capacity planning)"
        cmd: |
          jq '
            .templating.list |= map(
              if .name == "namespace" then
                .current = {"selected":true,"text":"keycloak","value":"keycloak"} |
                .options = [{"selected":true,"text":"keycloak","value":"keycloak"}] |
                .datasource = "Prometheus"
              elif .name == "realm" then
                .current = {"selected":true,"text":"uds","value":"uds"} |
                .options = [{"selected":true,"text":"uds","value":"uds"}] |
                .datasource = "Prometheus"
              else . end
            )
          ' src/keycloak/chart/dashboards/keycloak-capacity-planning-dashboard.json > tmp.json && mv tmp.json src/keycloak/chart/dashboards/keycloak-capacity-planning-dashboard.json
      - description: "Patch dashboard variable defaults (troubleshooting)"
        cmd: |
          jq '
            .templating.list |= map(
              if .name == "namespace" then
                .current = {"selected":true,"text":"keycloak","value":"keycloak"} |
                .options = [{"selected":true,"text":"keycloak","value":"keycloak"}] |
                .datasource = "Prometheus"
              else . end
            )
          ' src/keycloak/chart/dashboards/keycloak-troubleshooting-dashboard.json > tmp.json && mv tmp.json src/keycloak/chart/dashboards/keycloak-troubleshooting-dashboard.json
      - description: "Clean up temp directory"
        cmd: rm -rf .tmp-keycloak-grafana-dashboard || true
