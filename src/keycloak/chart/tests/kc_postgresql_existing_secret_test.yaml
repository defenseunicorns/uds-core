# Copyright 2025 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json

suite: Keycloak PostgreSQL - Using Existing Secret
set:
  devMode: false
  postgresql:
    secretRef:
      username:
        name: "test-postgresql-username-secret"
        key: "username-secret"
      password:
        name: "test-postgresql-password-secret"
        key: "password-secret"
      host:
        name: "test-postgresql-host-secret"
        key: "host-secret"
    database: "test-database-name"
    port: 5432
templates:
  - statefulset.yaml
  - secret-postgresql.yaml
  - secret-kc-realm.yaml
  - uds-package.yaml
tests:
  - it: should fail if database is not set
    set:
      postgresql.database: ""
    template: uds-package.yaml
    asserts:
      - failedTemplate:
          errorMessage: "Missing value for 'postgresql.database'."

  - it: should create a postgresql secret with database and port values
    template: secret-postgresql.yaml
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: data.database
          value: "test-database-name"
          decodeBase64: true
      - equal:
          path: data.port
          value: "5432"
          decodeBase64: true

  - it: should not include username, password, and host values in the created secret's data
    template: secret-postgresql.yaml
    asserts:
      - equal:
          path: data.username
          value: null
      - equal:
          path: data.password
          value: null
      - equal:
          path: data.host
          value: null

  - it: should fail if devMode is true
    set:
      devMode: true
    template: uds-package.yaml
    asserts:
      - failedTemplate:
          errorMessage: "Cannot use an external PostgreSQL Database when 'devMode' is enabled."

  - it: should fail if not all required secretRef values are set
    set:
      postgresql.secretRef.username.name: null
    template: uds-package.yaml
    asserts:
      - failedTemplate:
          errorMessage: 'Both "postgresql.secretRef.username.name" and "postgresql.secretRef.username.key" must be set when using secretRef.'

  - it: should render PostgreSQL Database access rule when postgresql is configured using existing secretRef
    template: uds-package.yaml
    asserts:
      - contains:
          path: spec.network.allow
          any: true
          content:
            description: "PostgreSQL Database access"
            port: 5432

  - it: should render templated PostgreSQL env vars with proper secret references when postgresql is configured using existing secrets
    template: statefulset.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KC_DB_URL_HOST
            valueFrom:
              secretKeyRef:
                key: host-secret
                name: test-postgresql-host-secret
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KC_DB_URL_PORT
            valueFrom:
              secretKeyRef:
                key: port
                name: RELEASE-NAME-keycloa-postgresql
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KC_DB_URL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database
                name: RELEASE-NAME-keycloa-postgresql
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KC_DB_USERNAME
            valueFrom:
              secretKeyRef:
                key: username-secret
                name: test-postgresql-username-secret
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KC_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password-secret
                name: test-postgresql-password-secret
