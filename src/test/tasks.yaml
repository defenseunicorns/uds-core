# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

tasks:
  - name: validate
    actions:
      - description: Validate...
        cmd: "echo Replace Me"

  - name: e2e-test
    actions:
      - description: "Run Test Apps E2E tests"
        task: create-deploy
      - description: "Run Network Tests"
        cmd: |
          npx jest test/jest/network.spec.ts
        dir: test/jest
      - description: "Run Test Resources Tests"
        cmd: |
          npx jest test/jest/test-resources.spec.ts
        dir: test/jest
      - description: "Test shared egress resource reconciliation"
        task: shared-egress-resources
      - description: "Remove Test Apps resources"
        task: remove

  - name: create-deploy
    description: Test app used for UDS Core validation
    actions:
      - description: Create zarf package for the test resources
        cmd: "uds zarf package create src/test --confirm --no-progress --skip-sbom"

      - description: Deploy the test resources
        cmd: "uds zarf package deploy build/zarf-package-uds-core-test-apps-*.zst --confirm --no-progress"

      - description: Wait for the admin app to be ready
        wait:
          cluster:
            kind: Deployment
            name: httpbin
            namespace: test-admin-app

      - description: Verify admin package CR is ready
        wait:
          cluster:
            kind: Package
            name: httpbin
            namespace: test-admin-app
            condition: "'{.status.phase}'=Ready"

      - description: Wait for the tenant app to be ready
        wait:
          cluster:
            kind: Deployment
            name: http-echo-multi-port
            namespace: test-tenant-app

      - description: Verify tenant package CR is ready
        wait:
          cluster:
            kind: Package
            name: test-tenant-app
            namespace: test-tenant-app
            condition: "'{.status.phase}'=Ready"

      - description: Verify the admin app is accessible
        wait:
          network:
            protocol: https
            address: demo.admin.uds.dev/status/202
            code: 202

      - description: Verify the VS Match rules for method regex/uri prefix
        wait:
          network:
            protocol: https
            address: demo.admin.uds.dev/status/302
            code: 404

      - description: Verify the VS Match rules for uri exact
        wait:
          network:
            protocol: https
            address: demo.admin.uds.dev/status/410
            code: 410

      - description: Verify the tenant app 8080 is accessible
        wait:
          network:
            protocol: https
            address: demo-8080.uds.dev
            code: 200

      - description: Verify the tenant app 8081 is accessible
        wait:
          network:
            protocol: https
            address: demo-8081.uds.dev
            code: 200

      - description: Verify authservice app package CR is ready
        wait:
          cluster:
            kind: Package
            name: httpbin-other
            namespace: authservice-test-app
            condition: "'{.status.phase}'=Ready"

      - description: Verify the authservice tenant app is accessible
        wait:
          network:
            protocol: https
            address: protected.uds.dev
            code: 200

      - description: Wait for authservice to reload configuration
        wait:
          cluster:
            kind: Deployment
            name: authservice
            namespace: authservice

      - description: Verify the authservice tenant app is protected by checking redirect
        maxRetries: 3
        cmd: |
          set -e
          SSO_REDIRECT=$(uds zarf tools kubectl run curl-test --image=cgr.dev/chainguard/curl:latest -q --restart=Never --rm -i -- -Ls -o /dev/null -w %{url_effective} "https://protected.uds.dev")

          case "${SSO_REDIRECT}" in
          "https://sso.uds.dev"*)
              echo "Protected by authservice"
              ;;
          *)
              # Fallback option if the condition is false
              echo "App is not protected by authservice"
              echo $SSO_REDIRECT
              exit 1
              ;;
          esac

      - description: Verify podinfo is healthy
        wait:
          cluster:
            kind: Pod
            name: app.kubernetes.io/name=podinfo
            namespace: podinfo
            condition: Ready

      - description: Verify podinfo package CR is ready
        wait:
          cluster:
            kind: Package
            name: podinfo
            namespace: podinfo
            condition: "'{.status.phase}'=Ready"

      - description: Verify podinfo podmonitor exists
        wait:
          cluster:
            kind: PodMonitor
            name: podinfo-podmonitor
            namespace: podinfo

      - description: Validate podinfo servicemonitor exists
        wait:
          cluster:
            kind: ServiceMonitor
            name: podinfo-svcmonitor
            namespace: podinfo

      - description: "Wait for Deny All Package 1 to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-deny-all-1
            namespace: curl-ns-deny-all-1
            condition: Ready

      - description: "Wait for Deny All Package 2 to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-deny-all-2
            namespace: curl-ns-deny-all-2
            condition: Ready

      - description: "Wait for Allow All Package to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-allow-all
            namespace: curl-ns-allow-all
            condition: Ready

      - description: "Wait for Remote Namespace Egress Package to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-remote-ns-egress
            namespace: curl-ns-remote-ns-1
            condition: Ready

      - description: "Wait for Remote Namespace Ingress Package to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-remote-ns-ingress
            namespace: curl-ns-remote-ns-2
            condition: Ready

      - description: "Wait for Kube Api Package to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-kube-api
            namespace: curl-ns-kube-api
            condition: Ready

      - description: "Wait for Remote Cidr Package to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-remote-cidr
            namespace: curl-ns-remote-cidr
            condition: Ready

      - description: "Wait for Egress Test Package 1 to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl
            namespace: egress-gw-1
            condition: Ready

      - description: "Wait for Egress Test Package 2 to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl
            namespace: egress-gw-2
            condition: Ready

  - name: shared-egress-resources
    description: Test reconciliation and clean-up of shared egress resources
    actions:
      - description: "Patch port to 81 in pkg-2"
        cmd: |
          uds zarf tools kubectl patch package pkg-2 \
          -n egress-gw-2 --type='json' \
          -p='[{"op": "replace", "path": "/spec/network/allow/0/ports/0", "value": 81}]'
          sleep 2

           # Check the gateway spec is updated
          gateway_ports=$(uds zarf tools kubectl get gateway gateway-httpbin-org -n istio-egress-gateway -ojson | jq '[.spec.servers[].port.number]')
          if [ "$(echo "$gateway_ports" | jq 'index(81)')" == "null" ]; then
            echo "Port 81 is not present in gateway-httpbin-org"
            exit 1
          fi
          if [ "$(echo "$gateway_ports" | jq 'index(80)')" != "null" ]; then
            echo "Port 80 is still present in gateway-httpbin-org"
            exit 1
          fi

          # Check the virtual service spec is updated
          vs_ports=$(uds zarf tools kubectl get vs egress-vs-httpbin-org -n istio-egress-gateway -ojson | jq '[.spec.http[].route[].destination.port.number]')
          if [ "$(echo "$vs_ports" | jq 'index(81)')" == "null" ]; then
            echo "Port 81 is not present in egress-vs-httpbin-org"
            exit 1
          fi
          if [ "$(echo "$vs_ports" | jq 'index(80)')" != "null" ]; then
            echo "Port 80 is still present in egress-vs-httpbin-org"
            exit 1
          fi

          # Check that the shared service entry spec is updated
          se_ports=$(uds zarf tools kubectl get serviceentry service-entry-httpbin-org -n istio-egress-gateway -ojson | jq '[.spec.ports[].number]')
          if [ "$(echo "$se_ports" | jq 'index(81)')" == "null" ]; then
            echo "Port 81 is not present in service-entry-httpbin-org"
            exit 1
          fi
          if [ "$(echo "$se_ports" | jq 'index(80)')" != "null" ]; then
            echo "Port 80 is still present in service-entry-httpbin-org"
            exit 1
          fi

      - description: "Patch protocol to TLS in pkg-2"
        cmd: |
          uds zarf tools kubectl patch package pkg-2 \
          -n egress-gw-2 \
          --type='json' \
          -p='[{"op": "replace", "path": "/spec/network/allow/0/remoteProtocol", "value": TLS}]'
          sleep 2

          # Check the gateway spec is updated
          gateway_proto=$(uds zarf tools kubectl get gateway gateway-httpbin-org -n istio-egress-gateway -ojson | jq '[.spec.servers[].port.protocol]')
          if [ "$(echo "$gateway_proto" | jq 'index("HTTP")')" != "null" ]; then
            echo "HTTP protocol is still present in gateway-httpbin-org"
            exit 1
          fi

          # Check the virtual service spec is updated
          vs_spec_keys=$(uds zarf tools kubectl get vs egress-vs-httpbin-org -n istio-egress-gateway -ojson | jq '.spec | keys')
          if [ "$(echo "$vs_spec_keys" | jq 'index("http")')" != "null" ]; then
            echo "HTTP protocol is still present in egress-vs-httpbin-org"
            exit 1
          fi

          # Check that the shared service entry spec is updated
          se_protocol=$(uds zarf tools kubectl get serviceentry service-entry-httpbin-org -n istio-egress-gateway -ojson | jq '[.spec.ports[].protocol]')
          if [ "$(echo "$se_protocol" | jq 'index("HTTP")')" != "null" ]; then
            echo "HTTP protocol is still present in service-entry-httpbin-org"
            exit 1
          fi

      - description: "Patch remote host to example.com in pkg-2"
        cmd: |
          uds zarf tools kubectl patch package pkg-2 \
          -n egress-gw-2 \
          --type='json' \
          -p='[{"op": "replace", "path": "/spec/network/allow/0/remoteHost", "value": example.com}]}'
          sleep 2

          # Check the spec and annotations removed from httpbin-org shared resources
          # Gateway checks
          annotations=$(uds zarf tools kubectl get gateway gateway-httpbin-org --namespace istio-egress-gateway -o jsonpath='{.metadata.annotations}' | jq -r '.["uds.dev/user-pkg-2-egress-gw-2"]')
          if [ "$annotations" != "null" ]; then
            echo "Package annotation still exists on gateway-httpbin-org"
            exit 1
          fi

          # Virtual Service checks
          annotations=$(uds zarf tools kubectl get virtualservice egress-vs-httpbin-org --namespace istio-egress-gateway -o jsonpath='{.metadata.annotations}' | jq -r '.["uds.dev/user-pkg-2-egress-gw-2"]')
          if [ "$annotations" != "null" ]; then
            echo "Package annotation still exists on egress-vs-httpbin-org"
            exit 1
          fi

          # Service Entry checks
          annotations=$(uds zarf tools kubectl get serviceentry service-entry-httpbin-org --namespace istio-egress-gateway -o jsonpath='{.metadata.annotations}' | jq -r '.["uds.dev/user-pkg-2-egress-gw-2"]')
          if [ "$annotations" != "null" ]; then
            echo "Package annotation still exists on service-entry-httpbin-org"
            exit 1
          fi

          # Check new shared resources created for example.com
          gateway_found=$(uds zarf tools kubectl get gateway gateway-example-com -n istio-egress-gateway >/dev/null 2>&1 && echo "True" || echo "False")
          if [ "$gateway_found" == "False" ]; then
            echo "gateway-example-com does not exist"
            exit 1
          fi

          vs_found=$(uds zarf tools kubectl get virtualservice egress-vs-example-com -n istio-egress-gateway >/dev/null 2>&1 && echo "True" || echo "False")
          if [ "$vs_found" == "False" ]; then
            echo "egress-vs-example-com does not exist"
            exit 1
          fi

          se_found=$(uds zarf tools kubectl get serviceentry service-entry-example-com -n istio-egress-gateway >/dev/null 2>&1 && echo "True" || echo "False")
          if [ "$se_found" == "False" ]; then
            echo "service-entry-example-com does not exist"
            exit 1
          fi

      - description: "Remove pkg-2"
        cmd: |
          uds zarf tools kubectl delete package pkg-2 --namespace egress-gw-2
          sleep 2

          # Check that the shared istio resources are removed
          gateway_found=$(uds zarf tools kubectl get gateway gateway-example-com -n istio-egress-gateway >/dev/null 2>&1 && echo "True" || echo "False")
          if [ "$gateway_found" == "True" ]; then
            echo "gateway-example-com still exists"
            exit 1
          fi

          vs_found=$(uds zarf tools kubectl get virtualservice egress-vs-example-com -n istio-egress-gateway >/dev/null 2>&1 && echo "True" || echo "False")
          if [ "$vs_found" == "True" ]; then
            echo "egress-vs-example-com still exists"
            exit 1
          fi

          se_found=$(uds zarf tools kubectl get serviceentry service-entry-example-com -n istio-egress-gateway >/dev/null 2>&1 && echo "True" || echo "False")
          if [ "$se_found" == "True" ]; then
            echo "service-entry-example-com still exists"
            exit 1
          fi

      - description: "Remove pkg-1"
        cmd: |
          uds zarf tools kubectl delete package pkg-1 --namespace egress-gw-1
          sleep 2

          # Check all shared resources are removed
          resource_count=$(uds zarf tools kubectl get gateway,virtualservice,serviceentry --namespace istio-egress-gateway -ojson | jq '.items | length')
          if [ "$resource_count" -ne 0 ]; then
            echo "Shared resources still exist"
            exit 1
          fi

  - name: remove
    actions:
      - description: Remove the test apps zarf package
        cmd: "uds zarf package remove build/zarf-package-uds-core-test-apps-*.zst --confirm --no-progress"
