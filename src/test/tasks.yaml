# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

tasks:
  - name: validate
    actions:
      - description: Validate...
        cmd: "echo Replace Me"

  - name: e2e-test
    actions:
      - description: "Run Test Apps E2E tests"
        task: create-deploy
      - description: "Run Network Tests"
        cmd: |
          npx jest test/jest/network.spec.ts
        dir: test/jest
      - description: "Remove Test Apps resources"
        task: remove

  - name: create-deploy
    description: Test app used for UDS Core validation
    actions:
      - description: Create zarf package for the test resources
        cmd: "uds zarf package create src/test --confirm --no-progress --skip-sbom"

      - description: Deploy the test resources
        cmd: "uds zarf package deploy build/zarf-package-uds-core-test-apps-*.zst --confirm --no-progress"

      - description: Wait for the admin app to be ready
        wait:
          cluster:
            kind: Deployment
            name: httpbin
            namespace: test-admin-app

      - description: Verify admin package CR is ready
        wait:
          cluster:
            kind: Package
            name: httpbin
            namespace: test-admin-app
            condition: "'{.status.phase}'=Ready"

      - description: Wait for the tenant app to be ready
        wait:
          cluster:
            kind: Deployment
            name: http-echo-multi-port
            namespace: test-tenant-app

      - description: Verify tenant package CR is ready
        wait:
          cluster:
            kind: Package
            name: test-tenant-app
            namespace: test-tenant-app
            condition: "'{.status.phase}'=Ready"

      - description: Verify the admin app is accessible
        wait:
          network:
            protocol: https
            address: demo.admin.uds.dev/status/202
            code: 202

      - description: Verify the VS Match rules for method regex/uri prefix
        wait:
          network:
            protocol: https
            address: demo.admin.uds.dev/status/302
            code: 404

      - description: Verify the VS Match rules for uri exact
        wait:
          network:
            protocol: https
            address: demo.admin.uds.dev/status/410
            code: 410

      - description: Verify the tenant app 8080 is accessible
        wait:
          network:
            protocol: https
            address: demo-8080.uds.dev
            code: 200

      - description: Verify the tenant app 8081 is accessible
        wait:
          network:
            protocol: https
            address: demo-8081.uds.dev
            code: 200

      - description: Verify authservice app package CR is ready
        wait:
          cluster:
            kind: Package
            name: httpbin-other
            namespace: authservice-test-app
            condition: "'{.status.phase}'=Ready"

      - description: Verify the authservice tenant app is accessible
        wait:
          network:
            protocol: https
            address: protected.uds.dev
            code: 200

      - description: Wait for authservice to reload configuration
        wait:
          cluster:
            kind: Deployment
            name: authservice
            namespace: authservice

      - description: Verify the authservice tenant app is protected by checking redirect
        maxRetries: 3
        cmd: |
          set -e
          SSO_REDIRECT=$(uds zarf tools kubectl run curl-test --image=cgr.dev/chainguard/curl:latest -q --restart=Never --rm -i -- -Ls -o /dev/null -w %{url_effective} "https://protected.uds.dev")

          case "${SSO_REDIRECT}" in
          "https://sso.uds.dev"*)
              echo "Protected by authservice"
              ;;
          *)
              # Fallback option if the condition is false
              echo "App is not protected by authservice"
              echo $SSO_REDIRECT
              exit 1
              ;;
          esac

      - description: Verify podinfo is healthy
        wait:
          cluster:
            kind: Pod
            name: app.kubernetes.io/name=podinfo
            namespace: podinfo
            condition: Ready

      - description: Verify podinfo package CR is ready
        wait:
          cluster:
            kind: Package
            name: podinfo
            namespace: podinfo
            condition: "'{.status.phase}'=Ready"

      - description: Verify podinfo namespace has ambient mode label
        cmd: |
          set -e
          AMBIENT_LABEL=$(uds zarf tools kubectl get namespace podinfo -o jsonpath='{.metadata.labels.istio\.io/dataplane-mode}')
          if [ "$AMBIENT_LABEL" = "ambient" ]; then
            echo " Podinfo namespace has the correct ambient mode label: $AMBIENT_LABEL"
          else
            echo " Podinfo namespace does not have the correct ambient mode label. Found: $AMBIENT_LABEL"
            exit 1
          fi

      - description: Verify podinfo pods don't have istio-proxy sidecar
        cmd: |
          set -e
          CONTAINERS=$(uds zarf tools kubectl get pods -n podinfo -l app.kubernetes.io/name=podinfo -o jsonpath='{.items[0].spec.containers[*].name}')
          if [ -z "$(echo "$CONTAINERS" | grep "istio-proxy")" ]; then
            echo " Podinfo pods don't have istio-proxy sidecar (as expected with ambient mode)"
          else
            echo " Found istio-proxy sidecar in podinfo pods, which is unexpected with ambient mode"
            exit 1
          fi

      - description: Verify podinfo podmonitor exists
        wait:
          cluster:
            kind: PodMonitor
            name: podinfo-podmonitor
            namespace: podinfo

      - description: Validate podinfo servicemonitor exists
        wait:
          cluster:
            kind: ServiceMonitor
            name: podinfo-svcmonitor
            namespace: podinfo

      - description: "Wait for Deny All Package 1 to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-deny-all-1
            namespace: curl-ns-deny-all
            condition: Ready

      - description: "Wait for Deny All Package 2 to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-deny-all-2
            namespace: curl-ns-deny-all
            condition: Ready

      - description: "Wait for Allow All Package to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-allow-all
            namespace: curl-ns-allow-all
            condition: Ready

      - description: "Wait for Remote Namespace Egress Package to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-remote-ns-egress
            namespace: curl-ns-remote-ns-1
            condition: Ready

      - description: "Wait for Remote Namespace Ingress Package to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-remote-ns-ingress
            namespace: curl-ns-remote-ns-2
            condition: Ready

      - description: "Wait for Kube Api Package to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-kube-api
            namespace: curl-ns-kube-api
            condition: Ready

      - description: "Wait for Remote Cidr Package to be Ready"
        wait:
          cluster:
            kind: Pod
            name: app=curl-pkg-remote-cidr
            namespace: curl-ns-remote-cidr
            condition: Ready

  - name: remove
    actions:
      - description:
        cmd: "uds zarf package remove build/zarf-package-uds-core-test-apps-*.zst --confirm --no-progress"
