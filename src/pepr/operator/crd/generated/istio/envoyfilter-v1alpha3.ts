// This file is auto-generated by kubernetes-fluent-client, do not edit manually

import { GenericKind, RegisterKind } from "kubernetes-fluent-client";

export class EnvoyFilter extends GenericKind {
  /**
   * Customizing Envoy configuration generated by Istio. See more details at:
   * https://istio.io/docs/reference/config/networking/envoy-filter.html
   */
  spec?: Spec;
  status?: { [key: string]: any };
}

/**
 * Customizing Envoy configuration generated by Istio. See more details at:
 * https://istio.io/docs/reference/config/networking/envoy-filter.html
 */
export interface Spec {
  /**
   * One or more patches with match conditions.
   */
  configPatches?: ConfigPatch[];
  /**
   * Priority defines the order in which patch sets are applied within a context.
   */
  priority?: number;
  /**
   * Criteria used to select the specific set of pods/VMs on which this patch configuration
   * should be applied.
   */
  workloadSelector?: WorkloadSelector;
}

export interface ConfigPatch {
  /**
   * Specifies where in the Envoy configuration, the patch should be applied.
   */
  applyTo?: ApplyTo;
  /**
   * Match on listener/route configuration/cluster.
   */
  match?: Match;
  /**
   * The patch to apply along with the operation.
   */
  patch?: Patch;
}

/**
 * Specifies where in the Envoy configuration, the patch should be applied.
 */
export enum ApplyTo {
  Bootstrap = "BOOTSTRAP",
  Cluster = "CLUSTER",
  ExtensionConfig = "EXTENSION_CONFIG",
  FilterChain = "FILTER_CHAIN",
  HTTPFilter = "HTTP_FILTER",
  HTTPRoute = "HTTP_ROUTE",
  Invalid = "INVALID",
  Listener = "LISTENER",
  ListenerFilter = "LISTENER_FILTER",
  NetworkFilter = "NETWORK_FILTER",
  RouteConfiguration = "ROUTE_CONFIGURATION",
  VirtualHost = "VIRTUAL_HOST",
}

/**
 * Match on listener/route configuration/cluster.
 */
export interface Match {
  /**
   * Match on envoy cluster attributes.
   */
  cluster?: Cluster;
  /**
   * The specific config generation context to match on.
   */
  context?: Context;
  /**
   * Match on envoy listener attributes.
   */
  listener?: Listener;
  /**
   * Match on properties associated with a proxy.
   */
  proxy?: Proxy;
  /**
   * Match on envoy HTTP route configuration attributes.
   */
  routeConfiguration?: RouteConfiguration;
}

/**
 * Match on envoy cluster attributes.
 */
export interface Cluster {
  /**
   * The exact name of the cluster to match.
   */
  name?: string;
  /**
   * The service port for which this cluster was generated.
   */
  portNumber?: number;
  /**
   * The fully qualified service name for this cluster.
   */
  service?: string;
  /**
   * The subset associated with the service.
   */
  subset?: string;
}

/**
 * The specific config generation context to match on.
 */
export enum Context {
  Any = "ANY",
  Gateway = "GATEWAY",
  SidecarInbound = "SIDECAR_INBOUND",
  SidecarOutbound = "SIDECAR_OUTBOUND",
}

/**
 * Match on envoy listener attributes.
 */
export interface Listener {
  /**
   * Match a specific filter chain in a listener.
   */
  filterChain?: FilterChain;
  /**
   * Match a specific listener filter.
   */
  listenerFilter?: string;
  /**
   * Match a specific listener by its name.
   */
  name?: string;
  portName?: string;
  /**
   * The service port/gateway port to which traffic is being sent/received.
   */
  portNumber?: number;
}

/**
 * Match a specific filter chain in a listener.
 */
export interface FilterChain {
  /**
   * Applies only to sidecars.
   */
  applicationProtocols?: string;
  /**
   * The destination_port value used by a filter chain's match condition.
   */
  destinationPort?: number;
  /**
   * The name of a specific filter to apply the patch to.
   */
  filter?: Filter;
  /**
   * The name assigned to the filter chain.
   */
  name?: string;
  /**
   * The SNI value used by a filter chain's match condition.
   */
  sni?: string;
  /**
   * Applies only to `SIDECAR_INBOUND` context.
   */
  transportProtocol?: string;
}

/**
 * The name of a specific filter to apply the patch to.
 */
export interface Filter {
  /**
   * The filter name to match on.
   */
  name?: string;
  /**
   * The next level filter within this filter to match upon.
   */
  subFilter?: SubFilter;
}

/**
 * The next level filter within this filter to match upon.
 */
export interface SubFilter {
  /**
   * The filter name to match on.
   */
  name?: string;
}

/**
 * Match on properties associated with a proxy.
 */
export interface Proxy {
  /**
   * Match on the node metadata supplied by a proxy when connecting to Istio Pilot.
   */
  metadata?: { [key: string]: string };
  /**
   * A regular expression in golang regex format (RE2) that can be used to select proxies
   * using a specific version of istio proxy.
   */
  proxyVersion?: string;
}

/**
 * Match on envoy HTTP route configuration attributes.
 */
export interface RouteConfiguration {
  /**
   * The Istio gateway config's namespace/name for which this route configuration was
   * generated.
   */
  gateway?: string;
  /**
   * Route configuration name to match on.
   */
  name?: string;
  /**
   * Applicable only for GATEWAY context.
   */
  portName?: string;
  /**
   * The service port number or gateway server port number for which this route configuration
   * was generated.
   */
  portNumber?: number;
  /**
   * Match a specific virtual host in a route configuration and apply the patch to the virtual
   * host.
   */
  vhost?: Vhost;
}

/**
 * Match a specific virtual host in a route configuration and apply the patch to the virtual
 * host.
 */
export interface Vhost {
  /**
   * The VirtualHosts objects generated by Istio are named as host:port, where the host
   * typically corresponds to the VirtualService's host field or the hostname of a service in
   * the registry.
   */
  name?: string;
  /**
   * Match a specific route within the virtual host.
   */
  route?: Route;
}

/**
 * Match a specific route within the virtual host.
 */
export interface Route {
  /**
   * Match a route with specific action type.
   */
  action?: Action;
  /**
   * The Route objects generated by default are named as default.
   */
  name?: string;
}

/**
 * Match a route with specific action type.
 */
export enum Action {
  Any = "ANY",
  DirectResponse = "DIRECT_RESPONSE",
  Redirect = "REDIRECT",
  Route = "ROUTE",
}

/**
 * The patch to apply along with the operation.
 */
export interface Patch {
  /**
   * Determines the filter insertion order.
   */
  filterClass?: FilterClass;
  /**
   * Determines how the patch should be applied.
   */
  operation?: Operation;
  /**
   * The JSON config of the object being patched.
   */
  value?: { [key: string]: any };
}

/**
 * Determines the filter insertion order.
 */
export enum FilterClass {
  Authn = "AUTHN",
  Authz = "AUTHZ",
  Stats = "STATS",
  Unspecified = "UNSPECIFIED",
}

/**
 * Determines how the patch should be applied.
 */
export enum Operation {
  Add = "ADD",
  InsertAfter = "INSERT_AFTER",
  InsertBefore = "INSERT_BEFORE",
  InsertFirst = "INSERT_FIRST",
  Invalid = "INVALID",
  Merge = "MERGE",
  Remove = "REMOVE",
  Replace = "REPLACE",
}

/**
 * Criteria used to select the specific set of pods/VMs on which this patch configuration
 * should be applied.
 */
export interface WorkloadSelector {
  /**
   * One or more labels that indicate a specific set of pods/VMs on which the configuration
   * should be applied.
   */
  labels?: { [key: string]: string };
}

RegisterKind(EnvoyFilter, {
  group: "networking.istio.io",
  version: "v1alpha3",
  kind: "EnvoyFilter",
});
