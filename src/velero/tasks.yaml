# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

includes:
  - common-setup: https://raw.githubusercontent.com/defenseunicorns/uds-common/v1.20.5/tasks/lint.yaml

variables:
  - name: VELERO_CRD_VERSION
    # renovate: datasource=github-tags depName=vmware-tanzu/helm-charts extractVersion=^velero-(?<version>.*)$ versioning=semver
    default: "11.1.0"  # Helm chart version, not app version

tasks:
  - name: validate
    actions:
      - task: health-check
      - task: execute-backup

  - name: health-check
    actions:
      - description: Velero StatefulSet Health Check
        wait:
          cluster:
            kind: Deployment
            name: velero
            namespace: velero

  - name: execute-backup
    actions:
      - description: generates a unique backup name
        cmd: "echo \"velero-test-$(date +'%Y%m%d%H%M%S')\""
        mute: true
        setVariables:
          - name: BACKUP_NAME
      - description: "creates a velero backup object (equivalent of `velero backup create --from-schedule ...`)"
        cmd: |-
          uds zarf tools kubectl apply -f - <<-EOF
            apiVersion: velero.io/v1
            kind: Backup
            metadata:
              name: ${BACKUP_NAME}
              namespace: velero
            spec:
              storageLocation: default
              csiSnapshotTimeout: 0s
              excludedNamespaces:
              - kube-system
              - flux
              - velero
              hooks: {}
              includeClusterResources: true
              itemOperationTimeout: 0s
              metadata: {}
              snapshotVolumes: true
              ttl: 240h0m0s
          EOF
      - description: wait for the backup object
        wait:
          cluster:
            kind: backup.velero.io
            name: ${BACKUP_NAME}
            namespace: velero
      - description: check the status of the backup object
        cmd: |-
          debug_velero_backup() {
            # get backup object
            uds zarf tools kubectl get backup.velero.io -n velero ${BACKUP_NAME} -o yaml
            uds zarf tools kubectl get backup.velero.io -A -o yaml
            echo "::endgroup::"

            # get backupstoragelocations
            uds zarf tools kubectl get backupstoragelocation -A -o yaml

            # describe backup
            uds zarf tools kubectl describe backup -n velero ${BACKUP_NAME}

            # velero pod logs
            uds zarf tools kubectl logs -n velero -l name=velero
          }

          STATUS=$(uds zarf tools kubectl get backup.velero.io -n velero ${BACKUP_NAME} -o jsonpath='{.status.phase}')
          if [ ${STATUS} != "Completed" ]; then
            echo "Status is '$STATUS'... waiting to see if it changes"

            # local testing indicates the status is "Finalizing" for a few seconds after completion
            sleep 30

            # check again...
            STATUS=$(uds zarf tools kubectl get backup.velero.io -n velero ${BACKUP_NAME} -o jsonpath='{.status.phase}')
            if [ ${STATUS} != "Completed" ]; then
              echo "Status is $STATUS... something isn't right.."
              debug_velero_backup
              # be a quitter
              exit 1
            fi
          fi

          echo "Checking Velero Volume Snapshot counts in the backup status..."
          SNAPSHOT_INFO=$(uds zarf tools kubectl describe backup.velero.io -n velero ${BACKUP_NAME})
          ATTEMPTED=$(echo "$SNAPSHOT_INFO" | grep 'Volume Snapshots Attempted:' | awk '{print $4}')
          COMPLETED=$(echo "$SNAPSHOT_INFO" | grep 'Volume Snapshots Completed:' | awk '{print $4}')

          echo "Velero Volume Snapshots Attempted: ${ATTEMPTED}"
          echo "Velero Volume Snapshots Completed: ${COMPLETED}"

          if [ "$ATTEMPTED" != "$COMPLETED" ]; then
            echo "Mismatch detected: Only ${COMPLETED} out of ${ATTEMPTED} Velero volume snapshots completed."
            debug_velero_backup
            exit 1
          fi
          echo "Status is Complete! Great success!"

  - name: e2e-test
    actions:
      - description: "Run Velero E2E tests"

  - name: update-crds
    description: "Update Velero CRDs from upstream"
    actions:
      - description: "Download Velero CRDs from upstream"
        shell:
          linux: bash
        cmd: |
          CHART_DIR="src/velero/chart/templates"
          BASE_URL="https://raw.githubusercontent.com/vmware-tanzu/helm-charts/refs/tags/velero-${VELERO_CRD_VERSION}/charts/velero/crds"

          echo "Updating Velero CRDs to version ${VELERO_CRD_VERSION}"

          # Fetch list of CRD files from GitHub API
          echo "Fetching CRD list from upstream..."
          CRD_FILES=$(curl -sSL "https://api.github.com/repos/vmware-tanzu/helm-charts/contents/charts/velero/crds?ref=velero-${VELERO_CRD_VERSION}" | uds zarf tools yq '.[].name')

          if [ -z "$CRD_FILES" ]; then
            echo "Error: Could not fetch CRD list from upstream"
            exit 1
          fi

          # Download each CRD
          for crd_file in $CRD_FILES; do
            echo "Downloading ${crd_file}"
            curl -sSL "${BASE_URL}/${crd_file}" -o "${CHART_DIR}/crds/${crd_file}"
          done

          echo "Successfully updated $(echo "$CRD_FILES" | wc -w) CRDs"
      - description: "Add License Headers to CRDs"
        task: common-setup:fix-license
