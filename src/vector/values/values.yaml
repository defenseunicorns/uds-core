# Run as an agent daemonset
role: "Agent"

customConfig:
  data_dir: /var/lib/vector
  # Ensure e2e delivery of events
  acknowledgements:
    enabled: true
  sources:
    pod_logs:
      type: "kubernetes_logs"
      oldest_first: true
    node_logs:
      type: "file"
      include: ["/var/log/*", "/var/log/kubernetes/**/*.log"]
      oldest_first: true
    internal_metrics:
      type: internal_metrics

  transforms:
    pod_logs_labelled:
      type: remap
      inputs: ["pod_logs"]
      source: |
        if !exists(.kubernetes.pod_labels.app) {
          if exists(.kubernetes.pod_labels."app.kubernetes.io/name") {
            .kubernetes.pod_labels.app = .kubernetes.pod_labels."app.kubernetes.io/name"
          } else if exists(.kubernetes.pod_labels.name) {
            .kubernetes.pod_labels.app = .kubernetes.pod_labels.name
          } else if exists(.kubernetes.pod_owner) {
            .kubernetes.pod_labels.app = .kubernetes.pod_owner
          } else {
            .kubernetes.pod_labels.app = .kubernetes.pod_name
          }
        }
        if !exists(.kubernetes.pod_labels.component) {
          if exists(.kubernetes.pod_labels."app.kubernetes.io/component") {
            .kubernetes.pod_labels.component = .kubernetes.pod_labels."app.kubernetes.io/component"
          } else {
            .kubernetes.pod_labels.component = ""
          }
        }

    node_logs_labelled:
      type: remap
      inputs: ["node_logs"]
      source: |
        .node_name = "${NODE_HOSTNAME}"
        if contains(string!(.file), "/var/log/kubernetes/") {
          .job = "kubernetes-logs"
        } else {
          .job = "varlogs"
        }

  sinks:
    loki_pod:
      type: "loki"
      inputs: ["pod_logs_labelled"]
      endpoint: "http://loki-gateway.loki.svc.cluster.local:80"
      path: "/loki/api/v1/push"
      encoding:
        codec: "raw_message"
      labels:
        namespace: '{{`{{ kubernetes.pod_namespace }}`}}'
        app: '{{`{{ kubernetes.pod_labels.app }}`}}'
        job: '{{`{{ kubernetes.pod_namespace }}`}}/{{`{{ kubernetes.pod_labels.app }}`}}'
        container: '{{`{{ kubernetes.container_name }}`}}'
        component: '{{`{{ kubernetes.pod_labels.component }}`}}'
        host: '{{`{{ kubernetes.pod_node_name }}`}}'
        filename: '{{`{{ file }}`}}'
        collector: "vector"
      buffer:
        type: disk
        max_size: 1073741824 # 1GiB
    loki_host:
      type: "loki"
      inputs: ["node_logs_labelled"]
      endpoint: "http://loki-gateway.loki.svc.cluster.local:80"
      path: "/loki/api/v1/push"
      encoding:
        codec: "raw_message"
      labels:
        job: '{{`{{ job }}`}}'
        host: '{{`{{ node_name }}`}}'
        filename: '{{`{{ file }}`}}'
        collector: "vector"
      buffer:
        type: disk
        max_size: 1073741824 # 1GiB
    prom_exporter:
      type: prometheus_exporter
      inputs: [internal_metrics]
      address: 0.0.0.0:9090

persistence:
  enabled: true
  hostPath:
    enabled: true
    path: "/var/lib/vector"

podMonitor:
  enabled: true
service:
  ports:
    - name: prom-exporter
      port: 9090
      protocol: TCP

securityContext:
  readOnlyRootFilesystem: true
  runAsUser: 0
  seLinuxOptions:
    type: spc_t

env:
  - name: NODE_HOSTNAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
