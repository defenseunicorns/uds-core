# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

kind: ZarfPackageConfig
metadata:
  name: k3d-core-slim-dev
  description: "Rehydratable UDS K3d + UDS Core Slim (Istio, UDS Operator and Keycloak) Checkpoint"
  authors: "Defense Unicorns - Product"
  # x-release-please-start-version
  version: "0.43.0"
  # x-release-please-end

variables:
  - name: CLUSTER_NAME
    description: "Name of the cluster"
    default: "uds"

  - name: K3D_EXTRA_ARGS
    description: "Optionally pass k3d arguments to the default"
    default: ""

  - name: NGINX_EXTRA_PORTS
    description: "Optionally allow more ports through Nginx (combine with K3D_EXTRA_ARGS '-p <port>:<port>@server:*')"
    default: "[]"

components:
  - name: destroy-cluster
    required: true
    description: "Optionally destroy the cluster before creating it"
    actions:
      onDeploy:
        before:
          - cmd: |
              echo "This package requires elevated permissions to deploy - requesting sudo (if paused enter password)"
              sudo echo "got sudo! success!"
          - cmd: k3d cluster delete ${ZARF_VAR_CLUSTER_NAME}
            description: "Destroy the cluster"
          - cmd: |
              sudo rm -rf data
          - cmd: |
              if [ -z "$TMPDIR" ]; then
                #  macOS sets TMPDIR to a user temp directory - this also provides more options to linux
                TMPDIR="/tmp"
              fi
              DATA_DIR="${TMPDIR}/uds-checkpoint-data"
              sudo rm -rf "$DATA_DIR"

  - name: create-cluster
    required: true
    description: "Create the K3d cluster w/UDS Core pre-installed"
    files:
      - source: uds-checkpoint.tar
        target: uds-checkpoint.tar
    actions:
      onCreate:
        before:
          # todo: scale down pepr, keycloak, ztunnel, istio-cni (maybe?)
          - description: "Scale down ztunnel, keycloak, and pepr before snapshot"
            cmd: |
              set -e
              echo "Scaling down pods..."
              kubectl -n istio-system scale deploy ztunnel --replicas=0 || true
              kubectl -n pepr-system scale deploy pepr-uds-core --replicas=0 || true
              kubectl -n keycloak scale statefulset keycloak --replicas=0 || true

              echo "Waiting for pods to terminate..."
              kubectl -n istio-system wait --for=delete pod -l app=ztunnel --timeout=60s || true
              kubectl -n pepr-system wait --for=delete pod -l app=pepr-uds-core --timeout=60s || true
              kubectl -n keycloak wait --for=delete pod -l app.kubernetes.io/name=keycloak --timeout=60s || true

          - cmd: ./checkpoint.sh
        onSuccess:
          - cmd: |
              if [ -z "$TMPDIR" ]; then
                #  macOS sets TMPDIR to a user temp directory - this also provides more options to linux
                TMPDIR="/tmp"
              fi
              DATA_DIR="${TMPDIR}/uds-checkpoint-data"
              sudo rm -rf "$DATA_DIR" uds-checkpoint.tar
      onDeploy:
        after:
          - cmd: |
              if [ -z "$TMPDIR" ]; then
                #  macOS sets TMPDIR to a user temp directory - this also provides more options to linux
                TMPDIR="/tmp"
              fi
              DATA_DIR="${TMPDIR}/uds-checkpoint-data"
              mkdir -p "$DATA_DIR"

              sudo tar --blocking-factor=64 -xpf uds-checkpoint.tar -C "$DATA_DIR"
              K8S_TOKEN="$(sudo cat ${DATA_DIR}/k3s_data/server/token)"
              echo $K8S_TOKEN
              sudo docker load -i "${DATA_DIR}/uds-k3d-checkpoint-latest.tar"

              k3d cluster create \
                -p "80:80@server:*" \
                -p "443:443@server:*" \
                --api-port 6550 \
                --k3s-arg "--disable=traefik@server:*" \
                --k3s-arg "--disable=metrics-server@server:*" \
                --k3s-arg "--disable=servicelb@server:*" \
                --k3s-arg "--disable=local-storage@server:*" \
                --k3s-arg "--token=${K8S_TOKEN}@server:*" \
                -v "${DATA_DIR}/kubelet_data:/var/lib/kubelet@server:*" \
                -v "${DATA_DIR}/k3s_data:/var/lib/rancher/k3s@server:*" \
                --image ghcr.io/defenseunicorns/uds-core/checkpoint:latest ${ZARF_VAR_K3D_EXTRA_ARGS} \
                ${ZARF_VAR_CLUSTER_NAME}
            description: "Create the cluster"

          # todo: scale back up pepr, keycloak, ztunnel, istio-cni (maybe?)
          - description: "Scale up ztunnel, keycloak, and pepr after checkpoint restore"
            cmd: |
              kubectl -n istio-system scale deploy ztunnel --replicas=1 || true
              kubectl -n pepr-system scale deploy pepr-uds-core --replicas=1 || true
              kubectl -n keycloak scale statefulset keycloak --replicas=1 || true

              echo "Waiting for rollouts to complete..."
              kubectl -n istio-system rollout status deploy ztunnel
              kubectl -n pepr-system rollout status deploy pepr-uds-core
              kubectl -n keycloak rollout status statefulset keycloak

          # This action waits on Keycloak since it is the slowest pod to start after cluster creation. By waiting on it, we guarantee the cluster is healthy and usable after deployment.
          - description: Keycloak to be Healthy
            wait:
              cluster:
                kind: Pod
                name: app.kubernetes.io/name=keycloak
                namespace: keycloak
                condition: Ready
        onSuccess:
          - cmd: rm -f uds-checkpoint.tar
